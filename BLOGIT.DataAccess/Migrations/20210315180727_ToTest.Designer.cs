// <auto-generated />
using System;
using BLOGIT.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BLOGIT.DataAccess.Migrations
{
    [DbContext(typeof(DataAccessContext))]
    [Migration("20210315180727_ToTest")]
    partial class ToTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("BLOGIT.Models.BlogUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BLOGIT.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BLOGIT.Models.Comments", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserImage")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BLOGIT.Models.Likes", b =>
                {
                    b.Property<string>("LikesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LikedPostPostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserWhoLikedId")
                        .HasColumnType("TEXT");

                    b.HasKey("LikesId");

                    b.HasIndex("LikedPostPostId");

                    b.HasIndex("UserWhoLikedId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BLOGIT.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ApprovalState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("PostCreatorId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BLOGIT.Models.PostCategories", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("BLOGIT.Models.UserActivityType", b =>
                {
                    b.Property<string>("UserActivityTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserActivityTypeId");

                    b.ToTable("UserActivityTypes");
                });

            modelBuilder.Entity("BLOGIT.Models.UserDataActivity", b =>
                {
                    b.Property<string>("UserDataActivityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityTypeUserActivityTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlogUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserDataActivityId");

                    b.HasIndex("ActivityTypeUserActivityTypeId");

                    b.HasIndex("BlogUserId");

                    b.ToTable("UserDataActivity");
                });

            modelBuilder.Entity("BLOGIT.Models.UserPostActivity", b =>
                {
                    b.Property<string>("UserPostActivityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityTypeUserActivityTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlogUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserPostActivityId");

                    b.HasIndex("ActivityTypeUserActivityTypeId");

                    b.HasIndex("BlogUserId");

                    b.HasIndex("PostId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BLOGIT.Models.Comments", b =>
                {
                    b.HasOne("BLOGIT.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BLOGIT.Models.Likes", b =>
                {
                    b.HasOne("BLOGIT.Models.Post", "LikedPost")
                        .WithMany("Likes")
                        .HasForeignKey("LikedPostPostId");

                    b.HasOne("BLOGIT.Models.BlogUser", "UserWhoLiked")
                        .WithMany()
                        .HasForeignKey("UserWhoLikedId");

                    b.Navigation("LikedPost");

                    b.Navigation("UserWhoLiked");
                });

            modelBuilder.Entity("BLOGIT.Models.Post", b =>
                {
                    b.HasOne("BLOGIT.Models.BlogUser", "PostCreator")
                        .WithMany("Posts")
                        .HasForeignKey("PostCreatorId");

                    b.Navigation("PostCreator");
                });

            modelBuilder.Entity("BLOGIT.Models.PostCategories", b =>
                {
                    b.HasOne("BLOGIT.Models.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLOGIT.Models.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BLOGIT.Models.UserDataActivity", b =>
                {
                    b.HasOne("BLOGIT.Models.UserActivityType", "ActivityType")
                        .WithMany("UserDataActivities")
                        .HasForeignKey("ActivityTypeUserActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLOGIT.Models.BlogUser", "BlogUser")
                        .WithMany()
                        .HasForeignKey("BlogUserId");

                    b.Navigation("ActivityType");

                    b.Navigation("BlogUser");
                });

            modelBuilder.Entity("BLOGIT.Models.UserPostActivity", b =>
                {
                    b.HasOne("BLOGIT.Models.UserActivityType", "ActivityType")
                        .WithMany("UserPostActivities")
                        .HasForeignKey("ActivityTypeUserActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLOGIT.Models.BlogUser", "BlogUser")
                        .WithMany("UserActivity")
                        .HasForeignKey("BlogUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLOGIT.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("ActivityType");

                    b.Navigation("BlogUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BLOGIT.Models.BlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BLOGIT.Models.BlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLOGIT.Models.BlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BLOGIT.Models.BlogUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BLOGIT.Models.BlogUser", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("UserActivity");
                });

            modelBuilder.Entity("BLOGIT.Models.Category", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("BLOGIT.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("BLOGIT.Models.UserActivityType", b =>
                {
                    b.Navigation("UserDataActivities");

                    b.Navigation("UserPostActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
